{"version":3,"sources":["api/genes.ts","utils/constants.ts","utils/styledComponents.ts","components/GeneViewer/ExonComponent.tsx","components/GeneViewer/ExonLink.tsx","components/GeneViewer/TranscriptComponent.tsx","utils/color.ts","components/GeneViewer/index.tsx","components/GeneInfo/index.tsx","components/History/index.tsx","components/SearchForm/index.tsx","components/SortingOptions/index.tsx","hooks/useCachedGenes.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["get","id","a","axios","response","data","styled","div","SpacerY","StyledLabel","label","StyledExonBox","left","length","color","ExonComponent","scale","exon","start","end","title","data-testid","StyledLink","ExonLink","StyledTranscript","exonSortingFn","exonA","exonB","TranscriptComponent","transcript","display_name","data-id","Exon","sort","map","index","nextItem","Fragment","COLOR_SET","getRandomColor","Canvass","GeneViewer","gene","sortingOption","ptValue","shouldConsiderPosition","Transcript","b","props","StyledBox","GeneInfo","description","Container","GeneItem","GeneId","GeneName","StyledH3","h3","History","genes","onClick","Input","onSearch","value","useState","inputValue","setInputValue","onChange","event","target","trimmedText","trim","alert","SortingOptions","selectedOption","setSelectedOption","handleOnChange","selectedOptionValue","type","name","checked","GENE_STORAGE_KEY","useCachedGenes","item","window","localStorage","getItem","JSON","parse","error","console","log","geneData","setGeneData","updatedGenesObject","cachedGenes","newGene","indexOfNewGene","findIndex","updatedCache","splice","getUpdatedCache","setItem","stringify","Error","Row","App","genesCache","setAppendNewGeneSearch","React","undefined","displayGene","setDisplayGene","setSortingOption","displayErrorMessage","setDisplayErrorMessage","handleOnInputChange","newVal","cachedValue","find","genesApi","SearchForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce079ee.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\n\nimport * as utils from \"./../utils/constants\";\nimport { Gene } from \"./../types\";\n\nexport const get = async (id: string): Promise<Gene> => {\n  const response: AxiosResponse<Gene> = await axios.get(\n    `${utils.ENSEML_URL}/lookup/id/${id}?content-type=application/json;expand=1`\n  );\n  return response.data;\n};\n","export const ENSEML_URL = \"https://rest.ensembl.org\";\n","import styled from \"styled-components\";\n\nexport const SpacerX = styled.div`\n  height: 20px;\n`;\n\nexport const SpacerY = styled.div`\n  width: 20px;\n`;\n\nexport const StyledLabel = styled.label`\n  font-size: 11px;\n  color: #999;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Exon } from \"./../../types\";\n\ntype Props = {\n  scale: (ptValue: number, shouldConsiderPosition: boolean) => number;\n  exon: Exon;\n  color: string;\n};\n\nconst ExonComponent = ({ scale, exon, color }: Props) => {\n  const left = scale(exon.start, true);\n  const length = scale(exon.end - exon.start, false);\n  return (\n    <StyledExonBox\n      title={exon.id}\n      data-testid=\"exon\"\n      left={left}\n      length={length}\n      color={color}\n    />\n  );\n};\n\nconst StyledExonBox = styled.div<{ left: number; length: number }>`\n  position: absolute;\n  left: ${({ left }) => left}px;\n  width: ${({ length }) => length}px;\n  height: 30px;\n  background-color: ${({ color }) => color};\n  margin: auto 0;\n`;\n\nexport default ExonComponent;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype Props = {\n  scale: (ptValue: number, shouldConsiderPosition: boolean) => number;\n  start: number;\n  end: number;\n  color: string;\n};\n\nconst ExonLink = ({ scale, start, end, color }: Props) => {\n  const left = scale(start, true);\n  const length = scale(end - start, false);\n  return (\n    <StyledLink\n      data-testid=\"exon-link\"\n      left={left}\n      length={length}\n      color={color}\n    />\n  );\n};\n\nconst StyledLink = styled.div<{ left: number; length: number }>`\n  position: absolute;\n  top: 15px;\n  left: ${({ left }) => left}px;\n  width: ${({ length }) => length}px;\n  border-top: 1px solid ${({ color }) => color};\n`;\n\nexport default ExonLink;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Transcript, Exon } from \"./../../types\";\nimport { StyledLabel } from \"./../../utils/styledComponents\";\nimport ExonComponent from \"./ExonComponent\";\nimport ExonLink from \"./ExonLink\";\n\ntype Props = {\n  scale: (ptValue: number, shouldConsiderPosition: boolean) => number;\n  transcript: Transcript;\n  color: string;\n};\n\nconst StyledTranscript = styled.div`\n  height: 35px;\n  position: relative;\n`;\n\nconst exonSortingFn = (exonA: Exon, exonB: Exon): number =>\n  exonA.start - exonB.start;\n\nconst TranscriptComponent = ({ scale, transcript, color }: Props) => {\n  return (\n    <>\n      <StyledLabel>{transcript.display_name}</StyledLabel>\n      <StyledTranscript data-testid=\"transcript\" data-id={transcript.id}>\n        {transcript.Exon.sort(exonSortingFn).map((exon, index) => {\n          const nextItem = transcript.Exon[index + 1];\n          return (\n            <React.Fragment key={exon.id}>\n              <ExonComponent exon={exon} scale={scale} color={color} />\n              {nextItem && (\n                <ExonLink\n                  scale={scale}\n                  start={exon.end}\n                  end={nextItem.start}\n                  color={color}\n                />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </StyledTranscript>\n    </>\n  );\n};\n\nexport default TranscriptComponent;\n","const COLOR_SET = [\n  \"#214559\",\n  \"#c65102\",\n  \"#391285\",\n  \"#cb416b\",\n  \"#0000aa\",\n  \"#9c004a\",\n  \"#000133\",\n  \"#033500\",\n  \"#b4262a\",\n  \"#00022e\",\n  \"#c14a09\",\n  \"#7f4330\",\n  \"#ca6636\",\n  \"#d5b60a\",\n  \"#900020\",\n  \"#420303\",\n  \"#112222\",\n  \"#820000\",\n  \"#4a0100\",\n  \"#980036\",\n  \"#3a181a\",\n  \"#696006\",\n  \"#490648\",\n  \"#76424e\",\n  \"#35063e\",\n  \"#80444c\",\n  \"#280137\",\n  \"#4d4b3a\",\n];\n\nexport const getRandomColor = (index: number): string => {\n  const randomIndex = index % (COLOR_SET.length - 1);\n  return COLOR_SET[randomIndex];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport TranscriptComponent from \"./TranscriptComponent\";\nimport { Gene, Transcript } from \"./../../types\";\nimport { SortingOption } from \"./../SortingOptions\";\nimport { getRandomColor } from \"./../../utils/color\";\n\ntype Props = {\n  gene: Gene;\n  sortingOption: SortingOption;\n};\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 700;\n\nconst Canvass = styled.div`\n  position: relative;\n  height: ${CANVAS_HEIGHT}px;\n  width: ${CANVAS_WIDTH}px;\n`;\n\nconst GeneViewer: React.FunctionComponent<Props> = ({\n  gene,\n  sortingOption,\n}: Props) => {\n  const scale = (ptValue: number, shouldConsiderPosition: boolean): number =>\n    (CANVAS_WIDTH / (gene.end - gene.start)) *\n    (shouldConsiderPosition ? ptValue - gene.start : ptValue);\n\n  const sortingFunction = (a: Transcript, b: Transcript) =>\n    sortingOption === \"longestToShortest\"\n      ? b.end - b.start - (a.end - a.start)\n      : a.end - a.start - (b.end - b.start);\n\n  return (\n    <Canvass data-testid=\"app-gene-viewer\">\n      {gene.Transcript.sort(sortingFunction).map(\n        (transcript: Transcript, index: number) => {\n          const props = {\n            scale,\n            transcript,\n            color: getRandomColor(index),\n          };\n          return <TranscriptComponent key={transcript.id} {...props} />;\n        }\n      )}\n    </Canvass>\n  );\n};\n\nexport default GeneViewer;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Gene } from \"./../../types\";\nimport { StyledLabel } from \"./../../utils/styledComponents\";\n\ntype Props = {\n  gene: Gene;\n};\n\nconst StyledBox = styled.div`\n  padding: 0 10px;\n`;\n\nconst GeneInfo: React.FunctionComponent<Props> = ({ gene }: Props) => {\n  return (\n    <>\n      <StyledBox>\n        <StyledLabel>Id</StyledLabel>\n        <div>{gene.id}</div>\n      </StyledBox>\n      <StyledBox>\n        <StyledLabel>Display Name</StyledLabel>\n        <div>{gene.display_name}</div>\n      </StyledBox>\n      <StyledBox>\n        <StyledLabel>Description</StyledLabel>\n        <div>{gene.description}</div>\n      </StyledBox>\n    </>\n  );\n};\n\nexport default GeneInfo;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { StyledLabel } from \"./../../utils/styledComponents\";\nimport { Gene } from \"./../../types\";\n\ntype Props = {\n  genes: Gene[];\n  onClick: (selectedGene: Gene) => void;\n};\n\nconst Container = styled.div`\n  background-color: #eee;\n  text-align: center;\n  padding: 10px;\n`;\n\nconst GeneItem = styled.div`\n  background-color: #eee;\n  cursor: pointer;\n  padding: 5px;\n\n  &:hover {\n    opacity: 0.7;\n  }\n`;\n\nconst GeneId = styled.div`\n  color: #4286f4;\n`;\n\nconst GeneName = styled.div`\n  font-size: 9px;\n`;\n\nconst StyledH3 = styled.h3`\n  margin: 0;\n`;\n\nconst History = ({ genes, onClick }: Props) => {\n  if (genes.length < 1) return null;\n  return (\n    <Container data-testid=\"history\">\n      <StyledH3>History</StyledH3>\n      <StyledLabel>(Most recent on top)</StyledLabel>\n      {genes.map((gene) => {\n        return (\n          <GeneItem\n            data-testid=\"history-item\"\n            key={gene.id}\n            onClick={() => onClick(gene)}\n          >\n            <GeneId data-testid=\"history-id\">{gene.id}</GeneId>\n            <GeneName data-testid=\"history-name\">{gene.display_name}</GeneName>\n          </GeneItem>\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default History;\n","import React, { useState } from \"react\";\n\nimport { StyledLabel } from \"./../../utils/styledComponents\";\n\ntype Props = {\n  label: string;\n  value: string;\n  onSearch: (value: string) => void;\n};\n\nconst Input: React.FunctionComponent<Props> = ({\n  label,\n  value,\n  onSearch,\n}: Props) => {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n\n  const handleOnInputUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  const searchKey = () => {\n    const trimmedText = inputValue.trim();\n    if (trimmedText) onSearch(trimmedText);\n    else {\n      alert(\"Please enter stable id of the gene.\");\n    }\n  };\n\n  return (\n    <div data-testid=\"search-form\">\n      <div>\n        <StyledLabel data-testid=\"search-form_label\">{label}</StyledLabel>\n      </div>\n      <input\n        data-testid=\"search-form_input\"\n        value={inputValue}\n        onChange={handleOnInputUpdate}\n      />\n      <button data-testid=\"search-form_button\" onClick={searchKey}>\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\n\nimport { StyledLabel } from \"./../../utils/styledComponents\";\n\nexport type SortingOption = \"longestToShortest\" | \"shortestToLongest\";\n\ntype Props = {\n  value: SortingOption;\n  onChange: (val: SortingOption) => void;\n};\n\nconst SortingOptions: React.FunctionComponent<Props> = ({\n  value,\n  onChange,\n}: Props) => {\n  const [selectedOption, setSelectedOption] = useState(value);\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedOptionValue =\n      event.target.value === \"longestToShortest\"\n        ? \"longestToShortest\"\n        : \"shortestToLongest\";\n    setSelectedOption(selectedOptionValue);\n    onChange(selectedOptionValue);\n  };\n  return (\n    <div data-testid=\"sort-form\">\n      <div>\n        <StyledLabel>Sort By:</StyledLabel>\n      </div>\n      <input\n        type=\"radio\"\n        name=\"longestToShortest\"\n        value=\"longestToShortest\"\n        checked={selectedOption === \"longestToShortest\"}\n        onChange={handleOnChange}\n        data-testid=\"sort-option_longestToShortest\"\n      />\n      Longest To Shortest\n      <input\n        type=\"radio\"\n        name=\"shortestToLongest\"\n        value=\"shortestToLongest\"\n        checked={selectedOption === \"shortestToLongest\"}\n        onChange={handleOnChange}\n        data-testid=\"sort-option_shortestToLongest\"\n      />\n      Shortest To Longest\n    </div>\n  );\n};\n\nexport default SortingOptions;\n","import { useState } from \"react\";\n\nimport { Gene } from \"./../types\";\n\nconst GENE_STORAGE_KEY = \"GENE_STORAGE_KEY\";\nconst MAX_NO_OF_ITEMS_IN_HISTORY = 5;\n\nconst getUpdatedCache = (cachedGenes: Gene[], newGene: Gene): Gene[] => {\n  const indexOfNewGene = cachedGenes.findIndex(\n    (gene: Gene) => gene.id === newGene.id\n  );\n\n  if (indexOfNewGene === -1) {\n    const updatedCache = [newGene, ...cachedGenes];\n    if (updatedCache.length > MAX_NO_OF_ITEMS_IN_HISTORY) {\n      updatedCache.splice(\n        MAX_NO_OF_ITEMS_IN_HISTORY,\n        updatedCache.length - MAX_NO_OF_ITEMS_IN_HISTORY\n      );\n    }\n    return updatedCache;\n  } else {\n    cachedGenes.splice(indexOfNewGene, 1);\n    return [newGene, ...cachedGenes];\n  }\n};\n\nfunction useCachedGenes() {\n  const [geneData, setGeneData] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(GENE_STORAGE_KEY);\n      return item ? JSON.parse(item) : [];\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  });\n\n  const useAppendNewGeneSearch = (gene: Gene) => {\n    try {\n      const updatedGenesObject = getUpdatedCache(geneData, gene);\n      setGeneData(updatedGenesObject);\n      window.localStorage.setItem(\n        GENE_STORAGE_KEY,\n        JSON.stringify(updatedGenesObject)\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [geneData, useAppendNewGeneSearch];\n}\n\nexport default useCachedGenes;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Gene } from \"./types\";\nimport * as genesApi from \"./api/genes\";\nimport GeneViewer from \"./components/GeneViewer\";\nimport GeneInfo from \"./components/GeneInfo\";\nimport History from \"./components/History\";\nimport SearchForm from \"./components/SearchForm\";\nimport SortingOptions, { SortingOption } from \"./components/SortingOptions\";\nimport useCachedGenes from \"./hooks/useCachedGenes\";\nimport { SpacerY } from \"./utils/styledComponents\";\n\nconst Error = styled.div`\n  color: red;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 20px;\n`;\n\nfunction App() {\n  const [genesCache, setAppendNewGeneSearch] = useCachedGenes();\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [displayGene, setDisplayGene] = React.useState<Gene | undefined>(\n    genesCache.length > 0 ? genesCache[0] : undefined\n  );\n  const [sortingOption, setSortingOption] = useState<SortingOption>(\n    \"longestToShortest\"\n  );\n  const [displayErrorMessage, setDisplayErrorMessage] = useState<boolean>(\n    false\n  );\n\n  const handleOnInputChange = async (newVal: string) => {\n    setDisplayErrorMessage(false);\n    setInputValue(newVal);\n    const cachedValue = genesCache.find((gene: Gene) => gene.id === newVal);\n    if (cachedValue !== undefined) {\n      setDisplayGene(cachedValue);\n      setAppendNewGeneSearch(cachedValue);\n    } else {\n      try {\n        const geneData = await genesApi.get(newVal);\n        setAppendNewGeneSearch(geneData);\n        setDisplayGene(geneData);\n      } catch (error) {\n        setDisplayErrorMessage(true);\n        setDisplayGene(undefined);\n      }\n    }\n  };\n\n  const handleOnSortingOptionChange = (sortingOption: SortingOption) => {\n    setSortingOption(sortingOption);\n  };\n\n  const handleOnHistorySelection = (gene: Gene) => {\n    setDisplayErrorMessage(false);\n    setAppendNewGeneSearch(gene);\n    setDisplayGene(gene);\n  };\n\n  return (\n    <div>\n      <Row>\n        <SearchForm\n          label=\"Enter stable id of the Gene\"\n          value={inputValue}\n          onSearch={handleOnInputChange}\n        />\n        <SpacerY />\n        <SortingOptions\n          value=\"longestToShortest\"\n          onChange={handleOnSortingOptionChange}\n        />\n      </Row>\n\n      {displayGene && (\n        <Row>\n          <GeneInfo gene={displayGene} />\n        </Row>\n      )}\n\n      <Row>\n        <History genes={genesCache} onClick={handleOnHistorySelection} />\n        <SpacerY />\n        {displayGene && (\n          <GeneViewer gene={displayGene} sortingOption={sortingOption} />\n        )}\n        {displayErrorMessage && (\n          <Error data-testid=\"error\">The entered stable id is invalid.</Error>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}